
:root {
    --primary-color: #357b70;
    --primary-color-darker: #1a3a35;
    --secondary-color: #e0b354;
    --dark-grey: #2b2b2b;
    --black: rgb(1, 1, 13);
    --sun-color-one: #edc655;
    --sun-color-two: #fcffad;
    --sun-color-three:#f76414;
    --active-link-color: #489c79;
}
/* declarations of NATIVE color variables, CSS variables defined by adding -- in front of variable name*/

a {
    color:var(--primary-color);
}
/* --primary-color can't be passed onto a property (like in Sass). Need to used the var() function as a value, like above */

* {
    box-sizing: border-box;
    /* universal * applies to all HTML elements. border-box sets default width of element to include padding and border */
}

.navigation-list {
    list-style-type:none;
    /* removes bullet points in navigation list */
}

.navigation-list li {
    display:inline-block;
    margin-left: 15px;
    /* inline-block lines navigation items in a row and gives them some space in-between. */
}

.page-header {
    display: flex;
    width: 100%;
    /* using percentages makes design more flexible than using px, 100% covers the full width of the page */
    padding: 20px;
    margin: auto;
}

.page-header_item {
    flex: 0 1 200px;
    /*gives the items in the header the base width of 200px and the ability to shrink along the same ratio, but cannot grow */
}

.page-header_item:last-child {
    flex-grow: 1;
    text-align: right;
    /*last child is pseudo-selctor that selects the last item (the navigation). Allows you to change items in header WITHOUT
    changing the logo (also in the header). This code allows the navigation items to take up the rest of the space, and
    be right alightned. ONLY overwrites flex-grow, not the other flex properties listed in .page-header_item */    
}

.profile_portrait {
    float: left;
    /* floats element to the left of other elements) */ 
    width: 250px;
    margin-right: 40px;
    border-radius: 50%;
    /* border-radius rounds each edge of the element's original width/height into a circle */
}

.profile, .about, .about_me-table {
    max-width: 700px;
    margin: 0 auto;
    text-align: center;
    /* margin 0 auto centers these div classes in the center of the web page*/
}

.contact {
    display:block;
    text-align: center;
}

.page-footer {
    clear: both;
    /* clears both floats (right and left) so that footer isn't affected by floated image) */
    display: flex;
    flex-direction: column;
    text-align: center;
    /* flexbox design for footer - makes it so that "Find me on" is above (in column) the images of links, in the center of the page */
}

body {
    font-family: 'Libre Baskerville', sans-serif;
    font-weight: 400;
    font-size: 16px;
    /*sets the font size to 16 pxd*/
    line-height: 1.6;
    /*sets the line-height to 1.6*/
}

h1 {
    font-size: 30 px;
    font-weight: 700;
    /*can write bold but it's better to use weight i.e. 300, 400 or 700*/
    color: black;
}

h2 {
    font-size: 20 px;
    font-weight: 300;
    color: black;
}

table {
    width:300px; 
    border-collapse: collapse; 
    text-align: center;
    border: solid 1px var(--dark-grey); 
}

thead {
    font-variant: small-caps;
    font-weight: bold;
    border: solid 1px var(--dark-grey);
}

td {
    font-size: 15px;
    font-weight: 100;
}

a {
    color: var(--primary-color);
}

a:visited {
    /* visited link */
    color: var(--primary-color-darker);
}

a:hover, a:focus {
    /* No underlining when hovering over a link*/
    text-decoration: none;
}

a:active {
    /* selected link */
    color: var(--active-link-color);
}

button, .button {
    /* overwrites browser defaults and resets the border */
    border: none;
    display: inline-block;
    /* takes the font from the outer container */
    font-family: inherit;
    /* styles background color, font color, and text decoration (underline) of the button */
    background-color: var(--primary-color-darker);
    color: white;
    text-decoration: none;
    /* adds spacing to the button*/
    padding: 10px;
    border-radius: 3px;
    /* gives the button a bottom border with a width of 2px, a type of solid, and a color in RGBA format and transition info*/
    border-bottom: 2px solid black; 
    transition: opacity 0.2s;
    /* always add the transition property to the default state of an element and needs to be on .button rule (not .button:hover)
    List transition-property (opacity) and then transition duration (0.2s)*/
}

button:hover, 
button:focus,
.button:hover,
.button:focus {
    /* lets the mouse appear as a hand when hovering over the button */ 
    cursor: pointer;

    /* reduces the opacity of the button to 80% */
    opacity: 0.8;
}

/*CSS grid used for work.html page. Can use any class name instead of .grid, could name it .project-list
New property but can define an alternative layout in CSS FIRST, then overwrite with the grid layout */

/*start grid fallback */
.grid_item {
    display:inline-block;
    width: 33%;
}
/* end grid fallback */

@supports (display:grid) {
    .grid {
        display: grid;
        /* grid-template-columns: 300px 300px 300 px; fractions/fr are better than pixels *responsive) */
        grid-template-columns: 1fr 1fr 1fr;
        /* CSS grid sets default, good practice to specify columns only */
        gap: 20px;
        margin: 0;
    }
    .grid_item {
        background-color:var(--primary-color-darker);
        width: auto;
        min-height: auto;
        margin: 0;
    }
    .grid_item:last-child {
        grid-column: 3/3;
        grid-row: 1/3;
    }
}

/*responsive design for different screen sizes. Should be placed at the end of the code after all other rules are applied.
Each @media query needs to house ONLY the properties unique to them. Code works with largest size screen --> smallest */
/* this code applies to all sizes greater than 750px */
@media all and (max-width: 750px) {
    .grid {
        gap: 10px;
        /* changes spacing between grid items to 10px */
    }
    .grid_item:last-child {
        grid-column: auto/auto;
        grid-row: auto/auto;
    }
    h1 {
        font-size: 22px;
    }
}
/*code applies to screen sizes 500 - 750 px */
@media all and (min-width: 500px) and (max-width: 750px){
    .grid {
        grid-template-columns: 1fr 1fr;
        /* this code changes layout from 3-column to 2-column when screen is between 500 - 750 px */
    }
}
/* code applies to screens smaller than 500 px */
@media all and (max-width: 500px) {
    .grid {
        grid-template-columns: 1fr;
        /*this code changes layout from a 2 column grid to a 1 column grid through grid-template-columns property */ 
    }
}

/* fill is a specific CSS property that ONLY applies to SVG images. Can use from --> to, or percentages. 
This code defines the rule */
@keyframes color-change {
    0% {
        fill: var(--sun-color-one);
    }
    50% {
        fill:var(--sun-color-two);
    }
    100% {
        fill: var(--sun-color-three);
    }
}
/*Then this code applies the animation to the sun in the graphic */
.sun {
    animation: 4s color-change infinite alternate linear;
}
/* animation: combines all factors together in order of duration--> name --> iteration-count --> direction-->timing-function */ 

/* Rule for moving larger cloud from 0px to 200px horziontally only. First # = horizontal value, second # = vertical value. */
@keyframes cloud-move {
    from {
        transform: translate(0, 50px)
    }
    to {
        transform: translate(200px, 50px)
    }
}
.cloud-front {
    animation: 30s cloud-move infinite alternate linear;
}
/* rule for moving smaller cloud the opposite direction */
@keyframes cloud-move-reverse {
    from {
        transform: translate(446px, 48px)
    }
    to {
        transform: translate(100px, 48px)
    }
}
.cloud-back {
    animation: 34s cloud-move-reverse infinite alternate linear
}